# Generated by Django 3.0.1 on 2020-01-01 05:51

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import scores.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'player',
                'verbose_name_plural': 'players',
                'ordering': ('first_name',),
            },
            managers=[
                ('objects', scores.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Edition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name="edition's nickname")),
                ('description', models.TextField(verbose_name='description')),
                ('game_type', models.CharField(choices=[('B', 'Base Game'), ('E', 'Expansion')], default='B', max_length=1, verbose_name='edition type')),
                ('max_players', models.CharField(choices=[('34', '3-4'), ('56', '5-6')], default='34', max_length=3, verbose_name='max player count')),
                ('duration', models.CharField(max_length=30, verbose_name='duration')),
                ('points', models.IntegerField(verbose_name='VPs to win')),
            ],
            options={
                'ordering': ('game_type', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('number', models.IntegerField(default=1, editable=False)),
                ('date_start', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date')),
                ('date_finish', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Finished')),
                ('duration', models.DurationField(default=datetime.timedelta, editable=False, verbose_name='Duration')),
                ('edition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scores.Edition')),
            ],
            options={
                'ordering': ('-number',),
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name="location's nickname")),
                ('latitude', models.CharField(blank=True, max_length=15)),
                ('longitude', models.CharField(blank=True, max_length=15)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Scoresheet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('color', models.CharField(choices=[('RD', 'Red'), ('BL', 'Blue'), ('WH', 'White'), ('OR', 'Orange'), ('GR', 'Green'), ('BR', 'Brown'), ('PK', 'Pink')], default='RD', max_length=2, verbose_name="player's color")),
                ('start_position', models.IntegerField(blank=True, default=1, verbose_name='initial placement position')),
                ('total_points', models.IntegerField(blank=True, default=0, verbose_name='total victory points')),
                ('num_settlements', models.IntegerField(blank=True, default=0, verbose_name='number of settlements')),
                ('num_cities', models.IntegerField(blank=True, default=0, verbose_name='number of cities')),
                ('num_vpcards', models.IntegerField(blank=True, default=0, verbose_name='VPs from cards')),
                ('num_chits', models.IntegerField(blank=True, default=0, verbose_name='number of chits')),
                ('longest_road', models.BooleanField(default=False, verbose_name='longest road card')),
                ('largest_army', models.BooleanField(default=False, verbose_name='largest army card')),
                ('metro_science', models.BooleanField(default=False, verbose_name='science metropolis')),
                ('metro_politics', models.BooleanField(default=False, verbose_name='politics metropolis')),
                ('metro_trade', models.BooleanField(default=False, verbose_name='trade metropolis')),
                ('merchant', models.BooleanField(default=False, verbose_name='merchant VP')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scores.Game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-total_points',),
            },
        ),
        migrations.AddField(
            model_name='game',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scores.Location'),
        ),
        migrations.AddField(
            model_name='game',
            name='winning_scoresheet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winning_scoresheet', to='scores.Scoresheet', verbose_name='Winning scoresheet'),
        ),
    ]
